CONSTTK const
INTTK int
IDENFR const_int_1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_int_2
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR int_1
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_int_3
ASSIGN =
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_int_4
ASSIGN =
INTCON 4
COMMA ,
IDENFR const_int_5
ASSIGN =
INTCON 5
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_int_6
ASSIGN =
INTCON 6
COMMA ,
IDENFR const_int_7
ASSIGN =
INTCON 7
COMMA ,
IDENFR const_int_8
ASSIGN =
INTCON 8
SEMICN ;
INTTK int
IDENFR BType
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_int_9
ASSIGN =
INTCON 9
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_int_10
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR int_2
SEMICN ;
INTTK int
IDENFR int_3
COMMA ,
IDENFR int_4
SEMICN ;
INTTK int
IDENFR int_5
COMMA ,
IDENFR int_6
COMMA ,
IDENFR int_7
SEMICN ;
INTTK int
IDENFR int_9
SEMICN ;
INTTK int
IDENFR int_10
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR int_11
ASSIGN =
INTCON 11
SEMICN ;
INTTK int
IDENFR f
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
IDENFR funDef_for_int
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR funcDef_for_int_with_params
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR funcDef1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR n
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR funcDef2
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR n
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR funcDef3
LPARENT (
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR funcDef4
LPARENT (
INTTK int
IDENFR int_12
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR funcDef5
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
IDENFR funcDef6
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR n
ASSIGN =
INTCON 0
SEMICN ;
RETURNTK return
IDENFR n
SEMICN ;
RBRACE }
VOIDTK void
IDENFR funcDef7
LPARENT (
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR funcDef8
LPARENT (
INTTK int
IDENFR int_13
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR funcDef9
LPARENT (
INTTK int
IDENFR int_14
COMMA ,
INTTK int
IDENFR int_15
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR funcDef9_2
LPARENT (
INTTK int
IDENFR int_14
COMMA ,
INTTK int
IDENFR int_15
COMMA ,
INTTK int
IDENFR int_15_2
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR funcDef10
LPARENT (
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR funcDef11
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
RBRACE }
VOIDTK void
IDENFR funcDef12
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RBRACE }
VOIDTK void
IDENFR funcDef13
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR int_16
SEMICN ;
LBRACE {
RBRACE }
RBRACE }
VOIDTK void
IDENFR funcDef14
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR int_17
SEMICN ;
IDENFR int_17
ASSIGN =
INTCON 17
SEMICN ;
INTCON 0
MULT *
INTCON 0
SEMICN ;
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR int_17
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
SEMICN ;
IDENFR int_17
ASSIGN =
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR int_17
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
SEMICN ;
RPARENT )
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR int_17
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR int_17
ASSIGN =
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR int_17
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
RBRACE }
FORTK for
LPARENT (
SEMICN ;
INTCON 0
SEMICN ;
IDENFR int_17
ASSIGN =
INTCON 0
RPARENT )
LBRACE {
RBRACE }
FORTK for
LPARENT (
SEMICN ;
INTCON 0
SEMICN ;
RPARENT )
LBRACE {
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR int_17
ASSIGN =
INTCON 0
RPARENT )
LBRACE {
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
IDENFR int_17
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR int_17
ASSIGN =
INTCON 0
SEMICN ;
IDENFR int_17
ASSIGN =
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR int_17
ASSIGN =
LPARENT (
INTCON 0
PLUS +
INTCON 1
RPARENT )
MULT *
INTCON 2
SEMICN ;
IDENFR int_17
ASSIGN =
IDENFR int_17
SEMICN ;
IDENFR int_17
ASSIGN =
IDENFR const_int_1
SEMICN ;
IDENFR int_17
ASSIGN =
INTCON 0
SEMICN ;
IDENFR int_17
ASSIGN =
INTCON 0
SEMICN ;
IDENFR int_17
ASSIGN =
INTCON 0
SEMICN ;
IDENFR int_17
ASSIGN =
IDENFR funDef_for_int
LPARENT (
RPARENT )
SEMICN ;
IDENFR int_17
ASSIGN =
IDENFR funcDef_for_int_with_params
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR int_17
ASSIGN =
PLUS +
INTCON 0
SEMICN ;
IDENFR int_17
ASSIGN =
PLUS +
INTCON 0
SEMICN ;
IDENFR int_17
ASSIGN =
MINU -
INTCON 0
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IDENFR funcDef8
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR funcDef9
LPARENT (
INTCON 0
COMMA ,
INTCON 0
RPARENT )
SEMICN ;
IDENFR funcDef9_2
LPARENT (
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RPARENT )
SEMICN ;
IDENFR funcDef9_2
LPARENT (
IDENFR int_17
COMMA ,
IDENFR int_17
COMMA ,
IDENFR int_17
RPARENT )
SEMICN ;
IDENFR funcDef9_2
LPARENT (
IDENFR const_int_1
COMMA ,
IDENFR const_int_1
COMMA ,
IDENFR const_int_1
RPARENT )
SEMICN ;
IDENFR funcDef9_2
LPARENT (
INTCON 1
MULT *
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RPARENT )
SEMICN ;
INTCON 0
SEMICN ;
INTCON 0
MULT *
INTCON 0
SEMICN ;
INTCON 1
DIV /
INTCON 1
SEMICN ;
INTCON 1
MOD %
INTCON 2
SEMICN ;
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 0
SEMICN ;
INTCON 0
MINU -
INTCON 0
SEMICN ;
IFTK if
LPARENT (
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 0
LSS <
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 0
GRE >
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 0
LEQ <=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 0
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 0
EQL ==
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 0
NEQ !=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 0
AND &&
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 0
OR ||
INTCON 0
RPARENT )
LBRACE {
RBRACE }
CONSTTK const
INTTK int
IDENFR int_18
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR funcDef15
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
SEMICN ;
INTTK int
IDENFR A
SEMICN ;
INTTK int
IDENFR _
SEMICN ;
错误！CONSTTK const
INTTK int
IDENFR constList
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR constList3
LBRACK [
INTCON 1
PLUS +
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR constList3_2
LBRACK [
INTCON 1
PLUS +
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
PLUS +
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR constList4
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
VOIDTK void
IDENFR functionList
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR intList
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
INTTK int
IDENFR intList2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
IDENFR const_int_1
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR intList3
LBRACK [
INTCON 1
PLUS +
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
INTTK int
IDENFR intList3_2
LBRACK [
INTCON 1
PLUS +
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
PLUS +
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR intList4
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR intList5
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
RBRACE }
VOIDTK void
IDENFR funDef1
LPARENT (
INTTK int
IDENFR f_int_list
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR funDef2
LPARENT (
INTTK int
IDENFR f_int_list
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR funDef3
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR intList
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
INTTK int
IDENFR intList2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
IDENFR const_int_1
RBRACE }
RBRACE }
SEMICN ;
IDENFR funcDef1
LPARENT (
IDENFR intList
RPARENT )
SEMICN ;
IDENFR funcDef2
LPARENT (
IDENFR intList2
RPARENT )
SEMICN ;
IDENFR funcDef1
LPARENT (
IDENFR intList2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371518\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
INTCON 0
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ""
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a%d%d"
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "aa\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON " !()*+,-./！\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "0123456789\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ":;<=>?@\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "[]^_`{|}~%d"
COMMA ,
INTCON 0
RPARENT )
SEMICN ;
SEMICN ;
PLUS +
MINU -
PLUS +
IDENFR d
SEMICN ;
INTTK int
IDENFR int_1
ASSIGN =
INTCON 0
SEMICN ;
IDENFR int_1
ASSIGN =
INTCON 0
SEMICN ;
IDENFR int_1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR int_1
ASSIGN =
INTCON 2
SEMICN ;
IDENFR int_1
ASSIGN =
INTCON 3
SEMICN ;
IDENFR int_1
ASSIGN =
INTCON 4
SEMICN ;
IDENFR int_1
ASSIGN =
INTCON 5
SEMICN ;
IDENFR int_1
ASSIGN =
INTCON 6
SEMICN ;
IDENFR int_1
ASSIGN =
INTCON 7
PLUS +
IDENFR const_int_1
SEMICN ;
IDENFR int_1
ASSIGN =
INTCON 8
PLUS +
IDENFR int_1
SEMICN ;
IDENFR int_1
ASSIGN =
INTCON 9
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR A
SEMICN ;
INTTK int
IDENFR _A
SEMICN ;
INTTK int
IDENFR abcdefghijk
SEMICN ;
INTTK int
IDENFR lmnopqrstvuwxyz
SEMICN ;
INTTK int
IDENFR ABCDEFGHIJK
SEMICN ;
INTTK int
IDENFR LMNOPQRSTUVWXYZ
SEMICN ;
IFTK if
LPARENT (
IDENFR int_1
OR ||
INTCON 0
AND &&
IDENFR int_1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR int_1
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
INTCON 1
OR ||
IDENFR funcDef15
LPARENT (
RPARENT )
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IDENFR int_1
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
INTCON 0
AND &&
IDENFR funcDef15
LPARENT (
RPARENT )
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
